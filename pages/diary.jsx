import { useState, useEffect } from "react";
import axios from "axios";
import { FaTrash, FaPencil } from "react-icons/fa6"

export default function Diary() {
    const [diaryEntry, setDiaryEntry] = useState("");
    const [diaryList, setDiaryList] = useState([]);
    const [task, setTask] = useState("");

    // Fetch the diary data with the useEffect hook, so that the GET request is only made when first loading/rendering the page
    useEffect(() => {
        axios.get("http://127.0.0.1:5000/api/diary")
            .then((response) => setDiaryList(response.data.diaryEntries))
            .catch((error) => console.log("There was an error:", error));
    })

    // Enter text into the input field and click the button to add a new diary entry.
    const handleChange = (e) => {
        setDiaryEntry(e.target.value);
    }

    const addDiaryEntry = (e) => {
        e.preventDefault();
        const newDiaryEntry = { "diaryText": diaryEntry, "textHidden": false, "inputHidden": true};
        axios.post("http://127.0.0.1:5000/api/diary", newDiaryEntry)
            .then(response => setDiaryList([...diaryList, newDiaryEntry]))
            .catch(error => {
                console.error('There was an error', error)
            })
        setDiaryEntry("");
    }


    // Double click a task to edit it.
    /*
    const handleDoubleClick = (e) => {
        const taskID = e.target.getAttribute("data-taskid");
        const doubleClickedTodo = `http://127.0.0.1:5000/api/todos/${taskID}`;
        axios.get(`http://127.0.0.1:5000/api/todos/`)
            .then((response) => {
                let filteredTodos = response.data.todos.filter(item => item.inputHidden === false);
                response.data.todos.map((item) => {
                    if ((taskID === item._id) && (filteredTodos.length === 0)) {
                        axios.put(doubleClickedTodo,
                            {
                                textHidden: true,
                                inputHidden: false
                            }
                        );
                    } else {
                        // Do nothing.
                    }
                });
            })
    }

    const handleEditChange = (e) => {
        setTask(e.target.value);
    }

    const editTask = (e) => {
        const inputId = e.target.getAttribute("data-inputid");
        const editedTodo = `http://127.0.0.1:5000/api/todos/${inputId}`;
        e.preventDefault();
        setTask(task);
        axios.get(`http://127.0.0.1:5000/api/todos/`)
            .then((response) => {
                response.data.todos.map((item) => {
                    if (e.target.getAttribute("data-inputid") === item._id) {
                        if (task != "") {
                            axios.put(editedTodo,
                                {
                                    taskText: task,
                                    textHidden: false,
                                    inputHidden: true
                                }
                            );
                            setTask("");
                        } else if (task === "") {
                            axios.put(editedTodo,
                                {
                                    taskText: e.target.value,
                                    textHidden: false,
                                    inputHidden: true
                                }
                            );
                            setTask("");
                        }
                    } else {
                        // Do nothing
                    }
                });
            })
    }
    */

    /*
     * Delete a task
     * 
     * Code for the delete function taken from https://stackoverflow.com/questions/29527385/removing-element-from-array-in-component-state
     * The function filters through the (soon old) task list and only gives back an item if it doesn't match the index of the clicked item.
     * _ represents an unused argument: Here, it is the current item in the array.

        const deleteTask = (index) => {
            setTodoList(oldList => {
                return oldList.filter((_, i) => i !== index)
            })
        }
    */
    
    /*
    const deleteTask = (todoTaskId) => {
        axios.delete(`http://127.0.0.1:5000/api/todos/${todoTaskId}`)
            .then(console.log(`Item ${todoTaskId} deleted successfully`))
            .catch(error => {
                console.log("An error occured:", error);
            })
    }
    */

    return(
        <>
            <title>Productivity Toolbox - Progress Diary</title>
            <meta name="description" content="Generated by create next app" />
            <meta name="viewport" content="width=device-width, initial-scale=1" />
            <link rel="icon" href="/favicon.ico" />
            <div className="min-h-screen bg-gradient-to-br from-green-300 via-blue-400 to-purple-500">
                <h1 className="text-3xl p-8 font-bold text-white text-center">
                    My Progress Diary
                </h1>
                <form onSubmit={addDiaryEntry} className="container flex mx-auto sd:w-full xl:w-1/2">
                    <input
                        className="mb-10 ml-3 pl-2 h-10 w-full text-black text-2xl"
                        type="text"
                        name="newDiaryEntry"
                        placeholder="Add a new diary entry here."
                        value={diaryEntry}
                        onChange={handleChange}
                    />
                    <button type="submit"
                        className="text-white bg-gradient-to-br from-green-400 to-blue-600 hover:bg-gradient-to-bl
                        focus:ring-4 focus:outline-none focus:ring-blue-200 dark:focus:ring-blue-500
                        font-medium rounded-lg text-2xl px-5 py-1 text-center ml-5 mr-2 mb-2 h-10">
                        Submit
                    </button>
                </form>
                <div className={`container mx-auto box-border rounded-xl h-auto sd:w-full xl:w-1/2 p-4 px-10 shadow-2xl
                    bg-gray-700 bg-opacity-20 text-left text-2xl text-white`}>
                        <p className={`${(diaryList.length === 0 ? "" : "hidden")}`}>Enter a diary entry and your progress diary will appear here.</p>
                        <div>
                            {diaryList.map((row, index) => (
                                <div className="grid grid-cols-12 pb-1 group w-full " key={index} data-rowid={index}>
                                    <div //onDoubleClick={handleDoubleClick}
                                        className={`col-span-8 ${(row.textHidden ? "hidden" : "")}`}
                                        data-diaryentryid={row._id}>
                                        {row.diaryText}
                                    </div>
                                    {/*
                                    <form
                                        data-inputid={row._id}
                                        className={`col-span-8 grid grid-cols-10 ${(row.inputHidden ? "hidden" : "")}`}
                                        onSubmit={editTask}>
                                        <input
                                                className="col-span-8 pl-2 h-10 text-black text-2xl"
                                                type="text"
                                                name="newtodo"
                                                placeholder={row.taskText}
                                                value={task}
                                                onChange={handleEditChange}
                                        />
                                        <button
                                            type="submit"
                                            className="col-span-2 w-full text-white bg-gradient-to-br from-green-400 to-blue-600 hover:bg-gradient-to-bl
                                            focus:ring-4 focus:outline-none focus:ring-blue-200 dark:focus:ring-blue-500
                                            font-medium rounded-lg text-2xl px-12 py-1 w-24 text-center ml-5">
                                            <FaPencil />
                                        </button>
                                    </form>
                                    <button
                                        onClick={() => deleteTask(row._id)}
                                        type="button"
                                        className="col-span-1 text-white bg-gradient-to-br from-green-400 to-blue-600 hover:bg-gradient-to-bl
                                        focus:ring-4 focus:outline-none focus:ring-blue-200 dark:focus:ring-blue-500
                                        font-medium rounded-lg text-2xl px-9 py-1 h-10 ml-10 w-24 text-center hidden group-hover:block">
                                        <FaTrash />
                                    </button>
                                    */}
                                </div>
                            ))}
                        </div>
                </div>
            </div>
        </>
    )
}